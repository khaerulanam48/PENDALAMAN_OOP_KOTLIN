video pertama

abstract class Personal(nama: String){
    init{
        println("Nama saya adalah $nama.")
    }
    fun tampilkanSSN(ssn: Int){
        println("SSN saya adalah $ssn.")
    }
    abstract fun tampilkan(keterangan: String)
}
class Pengajar(nama: String): Personal(nama){
    override fun tampilkan(keterangan: String){
        println(keterangan)
    }
}
fun main(args: Array <String>){
    val jek = Pengajar("Viola ventika")
    jek.tampilkan("saya seorang pengajar matematika.")
    jek.tampilkanSSN(23123)
}
----------------------------------------------------------------------
video ke 2

Kotlin Nested Class

class Outer{
    val a = "Di luar Nested Class."
    class Nested{
        val b = "Di dalam Nested Class."
        fun callMe()= "Function akan dipanggil di dalam Nsted Class."
    }
}
fun main(args: Array<String>){
    //Pengaksesan anggota dari Nested Class
    println(Outer.Nested().b)
    
    //Pembuatan Object dari Nested Class
    val nested = Outer.Nested()
    println(nested.callMe())
    
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Inner Class

class Outer{
    val a = "Di luar Nested Class."
    inner class Inner{
        fun callMe()= a
    }
}
fun main(args: Array<String>){
	val outer = Outer()
    println("Menggunakan objek outer: ${outer.Inner().callMe()}")
    
    val inner = Outer().Inner()
    println("Menggunakan objek inner: ${inner.callMe()}")
    
}
--------------------------------------------------------------------
video ke 3

class Person{
    companion object{
        fun callMe()= println("saya dipanggil")
    }
}
fun main(args: Array<String>){
    Person.callMe()
}
-------------------------------------------------------------------
video ke 4
Object Declaration

object Test{
    private var a: Int = 0
    var b: Int = 1
   
    fun halo(): Int {
        a = 12
        return a
    }
}
fun main(args: Array<String>){
    val hasil: Int
    hasil  = Test.halo()
    println("b = ${Test.b}")
    println("Hasil = $hasil")
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Object Expressions

open class Person(){
    fun makan()=println("makan mi")
    fun ngomong()=println("bareng-bareng")
    open fun doa()=println("lamak bana")
}

fun main (args: Array<String>){
    val muslim = object : Person(){
        override fun doa()= println("jangan lupa baca doa")
    }
    muslim.makan()
    muslim.ngomong()
    muslim.doa()
}
-------------------------------------------------------------------
video ke 5

sealed class Expr
class Const(val nilai: Int) : Expr()
class Sum(val kiri: Expr, val kanan: Expr):Expr()
object NotANumber:Expr()
fun eval(e:Expr):Int=
    when (e){
        is Const->e.nilai
        is Sum ->eval(e.kanan)+ eval(e.kiri)
        NotANumber->java.lang.Double.NaN
    }


-------------------------------------------------------------------
video ke 6

contoh pertama

data class User(val nama: String, val umur: Int)
fun main(args: Array<String>){
    val ridha = User("ridha", 29)
    println("Nama = ${ridha.nama}")
    println("Umur = ${ridha.umur}")
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
metode string 

data class User(val nama: String, val umur: Int)
fun main(args: Array<String>){
    val u1 = User ("Ridha", 29)
    println(u1.toString())
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
hasCode() and Equals()

data class User(val nama: String, val umur: Int)
fun main(args: Array<String>){
    val u1 = User("Joni", 29)
    val u2 = u1.copy()
    val u3 = u1.copy(nama = "amanda")
    
    println("u1 hashCode = ${u1.hashCode()}")
    println("u2 hashCode = ${u2.hashCode()}")
    println("u3 hashCode = ${u3.hashCode()}")
    
    if (u1.equals(u2)== true)
    	println("u1 sama dengan u2.")
    else
    	println("u1 tidak sama dengan u2.")
    if (u1.equals(u3)== true)
    	println("u1 sama dengan u3.")
    else
    	println("u1 tidak sama dengan u3.")
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
mendeklarasikan Destructing
data class User(val nama: String, val umur: Int, val jeniskelamin:String)
fun main(args: Array<String>){
    val u1 = User("ridha", 29, "Perempuan")
    
    val (nama, umur, jeniskelamin)= u1
    println("Nama = $nama")
    println("Umur = $umur")
    println("Jenis Kelamin = $jeniskelamin")
}
---------------------------------------------------------------
Video ke 7
interface MyInterface{
    val test : Int
    fun hai(): String
    fun hello(){
        println("Hello Semua!!!")
    }
}

class InterfaceImp: MyInterface{
    override val test: Int = 25
    override fun hai()="hai semua!!"
}
fun main(args: Array<String>){
    val obj = InterfaceImp()
    println("test=${obj.test}")
    println("panggil hallo:")
    
    obj.hello()
    println("Panggil dan print hai:")
    println(obj.hai())
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
interface InterfaceKu{
    // Property dengan Implementasi
    val prop: Int
    get() = 23
}

class ImplementasiInterface: InterfaceKu{
    //class body
}

fun main(args: Array<String>){
    val obj = ImplementasiInterface()
    println(obj.prop)
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Mengimplementasikan dua atau lebih interface dalam sebuah class

interface A{
    fun callMe(){
        println("dariInterface A")
    }
}
interface B{
    fun callMeToo(){
        println("dari interface B")
    }
}

class Anakan: A, B
fun main(args: Array<String>){
    val obj=Anakan()
    
    obj.callMe()
    obj.callMeToo()
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Multiple Interface

interface A{
    fun callMe(){
        println("dariInterface A")
    }
}
interface B{
    fun callMe(){
        println("dari interface B")
    }
}

class C: A, B{
    override fun callMe(){
        super<A>.callMe()
        super<B>.callMe()
    }
}
fun main(args: Array<String>){   
    val obj=C()
    obj.callMe()
}
------------------------------------------------------------------
video ke 8
Getter and Setter

fun main(args: Array<String>){
    val p = Person()
    p.nama = "Viola"
    println("${p.nama}")
}
class Person{
    var nama: String = "defaultValue"
    get()=field
    set(value){
        field = value
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Mengubah nilai dari property

fun main(args: Array<String>){
    val cewe = Girl()
    cewe.umurAsli = 15
    cewe.umurPalsu = 15
    println("Cewe: UmurAsli = ${cewe.umurAsli}")
    println("Cewe: UmurPalsu = ${cewe.umurPalsu}")
    val siti = Girl()
    siti.umurAsli = 35
    siti.umurPalsu = 35
    println("Siti: umurAsli = ${siti.umurAsli}")
    println("Siti: umurPalsu = ${siti.umurPalsu}")
}
class Girl{
    var umurPalsu: Int = 0
    get() = field
    set(value){
        field = if (value < 18)
        18
        else if(value>18 && value<=30)
        value
        else
        value-3
    }
    var umurAsli: Int = 0
}
---------------------------------------------------------------------
Video ke 9

open class Personal(umur: Int, nama: String){
    init{
        println("Nama Saya adalah $nama.")
        println("Nama Saya adalah $nama.")
    }
}
class GuruMatematika(umur: Int, nama: String): Personal(umur, nama){
    fun mengajar(){
        println("Sata mengajar di kelas SD.")
    }
}
class PersepakBola(umur: Int, nama: String): Personal(umur, nama){
    fun bermain(){
        println("Saya bermain untuk Persela.")
        
    }
}
fun main(args: Array<String>){
    val t1 = GuruMatematika(25, "Ridha")
    t1.mengajar()
    println()
    val f1 = PersepakBola(29, "Rafi")
    f1.bermain()
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

open class Personal(umur: Int, nama: String){
    //Beberapa Kode
}

class PersepakBola(umur: Int, nama: String, klub: String): Personal(umur, nama){
    init {
        println("Pemain Bola $nama umur $umur dan bermain untuk $klub.")
        
    }
    fun bermain(){
        println("Saya sedang bermain bola.")
    }
}
fun main(args: Array<String>){
    val t1 = PersepakBola(29, "Rafi", "PERSELA")
    
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
fun main(args: Array<String>){
    val p1 = AuthLog("Password Buruk")
}
open class Log{
    var data: String = ""
    var nomorData = 0
    constructor(_data: String){
    }
    constructor(_data: String, _nomorData: Int) {
        data = _data
        nomorData = _nomorData
        println("$data: $nomorData kali")
    }
}
class AuthLog: Log{
    constructor(_data: String): this("Dari Authlog ->+ $_data",10){
    }
    constructor(_data: String, _nomorData: Int): super(_data, _nomorData){
        
    }
}
------------------------------------------------------------------------------------------
video ke 10
Constructor Primary

fun main(args: Array<String>){
    val person1 = Person("viola",17)
    
    println("Nama Depan = $(person1.namaDepan)")
    println("Usia = ${person1.usia}")
}

class Person(val namaDepan: String, var usia:Int){
    
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Constructor Primary dan inisialisai blok

fun main(args: Array <String>){
    val person = Person("viola", 15)
}

class Person(nama : String, umurPerson: Int){
    val namaDepan: String
    var umur: Int
    
    //initialisasi block
    init{
        namaDepan = nama.capitalize()
        umur = umurPerson
        
        println("nama Depan = $namaDepan")
        println("Umur = $umur")
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Constructor Secondary

fun main(args: Array<String>){
	val p1 = AuthLog("Password")
}
open class Log{
    var data:String = ""
    var numberOfData = 0
    
    constructor(data1:String){
        
    }
    constructor(data1: String, numberOfData1: Int){
        data = data1
        numberOfData = numberOfData1
        println("$data: $numberOfData X")
    }
}
class AuthLog: Log{
    constructor(data1:String): this("Dari AuthLog ->" +data1, 10){
        
    }
    constructor(data1: String, numberOfData1: Int): super(data1, numberOfData1){
        
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

fun main(args: Array<String>){
    val p1 = AuthLog("Password Buruk")
}
open class Log{
    var data: String = ""
    var nomorData = 0
    constructor(_data: String){
    }
    constructor(_data: String, _nomorData: Int) {
        data = _data
        nomorData = _nomorData
        println("$data: $nomorData kali")
    }
}
class AuthLog: Log{
    constructor(_data: String): this("Dari Authlog -> " + _data,10){
    }
    constructor(_data: String, _nomorData: Int): super(_data, _nomorData){
        
    }
}
------------------------------------------------------------------------------------
video ke 11
kotlin class dan objek

class Lampu{
    //data member
    private var isOn: Boolean = false
    //member function
    fun turnOn(){
        isOn = true
    }
    //member function
    fun turnOff(){
        isOn = false
    }
    fun displayLightStatus(lampu:String){
        if(isOn == true)
        	println("$lampu lampu is On")
        else
        	println("$lampu lampu is Off")
    }
}
fun main(args: Array<String>){
    val l1 = Lampu()//create l1 object Lampu class
    val l2 = Lampu()//create l2 object Lampu class
    l1.turnOn()
    l2.turnOff()
    l1.displayLightStatus("l1")
    l2.displayLightStatus("l2")
}
------------------------------------------------------------------------------